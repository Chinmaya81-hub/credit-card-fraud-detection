import pandas  as pd
import matplotlib.pyplot as plt
import seaborn as sns
data = pd.read_csv('/cxldata/projects/creditcard.csv')

data.head(10)

data.shape
(284807, 31)
data.describe()
data.isnull().sum()
Time      0
V1        0
V2        0
V3        0
V4        0
V5        0
V6        0
V7        0
V8        0
V9        0
V10       0
V11       0
V12       0
V13       0
V14       0
V15       0
V16       0
V17       0
V18       0
V19       0
V20       0
V21       0
V22       0
V23       0
V24       0
V25       0
V26       0
V27       0
V28       0
Amount    0
Class     0
dtype: int64
X = data.loc[:, data.columns != 'Class']
y = data.loc[:, data.columns == 'Class']

print(data['Class'].value_counts())

print('Valid Transactions: ', round(data['Class'].value_counts()[0]/len(data) * 100,2), '% of the dataset')
print('Fraudulent Transactions: ', round(data['Class'].value_counts()[1]/len(data) * 100,2), '% of the dataset')
0    284315
1       492
Name: Class, dtype: int64
Valid Transactions:  99.83 % of the dataset
Fraudulent Transactions:  0.17 % of the dataset
colors = ['blue','red']

sns.countplot('Class', data=data, palette=colors)
<matplotlib.axes._subplots.AxesSubplot at 0x7fab6c52da20>

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

print("Transactions in X_train dataset: ", X_train.shape)
print("Transaction classes in y_train dataset: ", y_train.shape)

print("Transactions in X_test dataset: ", X_test.shape)
print("Transaction classes in y_test dataset: ", y_test.shape)
Transactions in X_train dataset:  (199364, 30)
Transaction classes in y_train dataset:  (199364, 1)
Transactions in X_test dataset:  (85443, 30)
Transaction classes in y_test dataset:  (85443, 1)
from imblearn.over_sampling import SMOTE

print("Before over-sampling\n:", y_train['Class'].value_counts())

sm = SMOTE()

X_train_res, y_train_res = sm.fit_sample(X_train, y_train['Class'])

print("After over-sampling:\n", y_train_res.value_counts())
Using TensorFlow backend.
Before over-sampling
: 0    199019
1       345
Name: Class, dtype: int64
After over-sampling:
 1    199019
0    199019
Name: Class, dtype: int64
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, auc, roc_curve

parameters = {"penalty": ['l1', 'l2'], 'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}

lr = LogisticRegression()

clf = GridSearchCV(lr, parameters, cv=5, verbose=5, n_jobs=3)

k = clf.fit(X_train_res, y_train_res)

print(k.best_params_)
Fitting 5 folds for each of 14 candidates, totalling 70 fits
[Parallel(n_jobs=3)]: Using backend LokyBackend with 3 concurrent workers.
[Parallel(n_jobs=3)]: Done  12 tasks      | elapsed:    4.3s
[Parallel(n_jobs=3)]: Done  70 out of  70 | elapsed:   44.8s finished
{'C': 1, 'penalty': 'l2'}
lr_gridcv_best = clf.best_estimator_

y_test_pre = lr_gridcv_best.predict(X_test)

cnf_matrix_test = confusion_matrix(y_test, y_test_pre)

print("Recall metric in the test dataset:", (cnf_matrix_test[1,1]/(cnf_matrix_test[1,0]+cnf_matrix_test[1,1] )))


y_train_pre = lr_gridcv_best.predict(X_train_res)

cnf_matrix_train = confusion_matrix(y_train_res, y_train_pre)

print("Recall metric in the train dataset:", (cnf_matrix_train[1,1]/(cnf_matrix_train[1,0]+cnf_matrix_train[1,1] )))
Recall metric in the test dataset: 0.9183673469387755
Recall metric in the train dataset: 0.9193795567257398
from sklearn.metrics import plot_confusion_matrix

class_names = ['Not Fraud', 'Fraud']

plot_confusion_matrix(k, X_test, y_test,  values_format = '.5g', display_labels=class_names) 
plt.title("Test data Confusion Matrix")
plt.show()

plot_confusion_matrix(k, X_train_res, y_train_res,  values_format = '.5g', display_labels=class_names)
plt.title("Oversampled Train data Confusion Matrix")
plt.show()

